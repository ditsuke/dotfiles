# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Auto clone oh-my-zsh if it doesn't exist
[[ -d $ZSH ]] || { echo "Cloning ohmyzsh" ; git clone https://github.com/ohmyzsh/ohmyzsh.git $ZSH }

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME=

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Plugins to load.
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	vi-mode
	git
	fzf
	dircycle
	firewalld # handy aliases for firewalld
	nmap # aliases for the nmap ("network mapper") tool
	sublime-merge
	zsh-interactive-cd
	aws
  # direnv
	# docker
	# taskwarrior
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

## Aliases
alias vim="nvim +NoSession"
alias cat="bat"
alias ls="eza"
alias l="eza --long --all --header"
alias dust="dust --reverse"
alias fzf="fzf --layout=reverse --height='30%'"
alias fzfp="fzf --preview='bat {}'"
alias edit-fzf="$EDITOR \"\$(fzf)\""
alias e="$EDITOR"
alias ai="mods"
alias lg="lazygit"

### Habits from windows land and more
alias where="which"
alias cls="clear"
alias open="xdg-open"

### So I don't need to remember weird binary names
alias clean-dev-artifacts="kondo --older 3w"

[[ $TERM == "xterm-kitty" ]] && alias ssh='kitty +kitten ssh'

### Gnome Utilities

#### Night light -- doesn't seem to really work when operating from gsettings/the command line
alias night-light-on="gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true"
alias night-light-off="gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled false"

## Hooks

### Zoxide
if [[ -x "$(which zoxide)"  ]]; then
	eval "$(zoxide init zsh)"
fi

if [[ -x "$(which mise)" ]]; then
  eval "$(mise activate zsh)"
fi

## Functions

### Print PATH
print-path() {
	echo $PATH | sed "s/:/\n/g"
}

## Keybindings

### Vim on
#bindkey -v

## Prompt
eval "$(starship init zsh)"

# broot the file browser
[ -f ~/.config/broot/launcher/bash/br ] && source ~/.config/broot/launcher/bash/br

## Completions
### Brew
if type brew &>/dev/null; then
	FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi
if type nix &>/dev/null; then
	fpath=(~/.nix-profile/share/zsh/vendor-completions ~/.nix-profile/share/zsh/site-functions $fpath)
	# HACK: avoid re-sourcing nix profile (overwrites PATH precedence in nested nix envs)
	if [ -n "${__ETC_PROFILE_NIX_SOURCED:-}" ] ; then export __ETC_PROFILE_NIX_SOURCED ; fi
fi
### pipx
# eval "$(register-python-argcomplete pipx)"

COMPLETIONS_PATH=~/.cache/zsh/completions
# Generate completions for commands that support it
# Usage: _generate-completions <command> <completion_command>
function _generate-completions() {
	local cmd=$1
	local comp_cmd=$2

	if command -v "$cmd" >/dev/null 2>&1; then
		comp_script="$COMPLETIONS_PATH/_$cmd"
		if [ ! -f "$comp_script" ]; then
			mkdir -p $COMPLETIONS_PATH
			eval $comp_cmd > "$comp_script"
		fi
	fi
}

_generate-completions "just" "just --completions zsh"
_generate-completions "flamegraph" "flamegraph --completions zsh"
fpath=($COMPLETIONS_PATH $fpath)
export FPATH
autoload -Uz compinit
compinit

## Functions

### Download a m3u8 playlist
function download_m3u8 {
  # $1 is the URL of the m3u8 playlist
  # $2 is the output file name

  # Check if the URL and output file name are provided
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: download_m3u8 <URL of m3u8 playlist> <output file name>"
    return
  fi

  # Download the m3u8 playlist using ffmpeg with the protocol whitelist flag
  ffmpeg -protocol_whitelist "file,http,https,tcp,tls,crypto" -i $1 -c copy -bsf:a aac_adtstoasc $2
}

# Function to randomize filenames in a directory while preserving extensions
randomize-filenames() {
  # Directory path (default: current directory)
  local directory="${1:-.}"
  local recursive="${2:-false}"

  cd "$directory" || return 1

  local files=()
  if [[ "$recursive" == "true" ]]; then
    echo "Recursively randomizing file names in '$directory'..."
    while IFS= read -r -d '' file; do
      files+=("$file")
    done < <(find "$directory" -type f -print0)
  else
    files=(*)
    echo "Randomizing file names in '$directory'..."
    echo "${files[@]}"
  fi

  for file in "${files[@]}"; do
    if [[ -f "$file" ]]; then
      local file_name="$(basename "$file")"
      local parent_path="$(dirname "$file")"
      # HACK: this check is weak, but its the best we can do
      # without storing the generated names in a datastore.
      if [[ "$file_name" =~ ^[[:alnum:]]{12}\.[[:alnum:]]+$ ]]; then
        echo "Skipping already randomized file: '$file'"
      else
        local random_name=$(mktemp -u XXXXXXXXXXXX)
        local extension="${file##*.}"
        mv "$file" "$parent_path/$random_name.$extension"
        echo "Renamed '$file' to '$random_name.$extension'"
      fi
    fi
  done

  echo "File name randomization complete."
}

docker-containers-remove() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

docker-pruneall() {
    docker-containers-remove
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
    docker system prune --all --force
}


## Atuin, alternative shell history, synced across machines.
eval "$(atuin init zsh --disable-up-arrow)"

eval "$(direnv hook zsh)"

# Syntax highlighting with fast-syntax-highlighting!
FSH_DIR=$HOME/.fsh
[[ -d $FSH_DIR ]] || { echo "Cloning fsh" ; git clone https://github.com/zdharma-continuum/fast-syntax-highlighting $FSH_DIR }
source $FSH_DIR/fast-syntax-highlighting.plugin.zsh

# Auto-switch to zellij on ssh connections -
# disable with NOZ=1 (post login) or --no-rc (pre-login)
if [[ $- =~ i ]] && [[ -z "$ZELLIJ" ]] && [[ -n "$SSH_TTY" ]] && [[ -z "$NOZ" ]]; then
  echo "Activating zellij..."
  zellij attach ssh_zellij || zellij -s ssh_zellij
fi
