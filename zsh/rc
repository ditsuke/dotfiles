# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME=

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	vi-mode
	git
	fzf
	dircycle
	direnv
	firewalld # handy aliases for firewalld
	nmap # aliases for the nmap ("network mapper") tool
	sublime-merge
	sudo
	themes # TODO: remove. allows switching zsh themes on-the-fly with `lstheme` and `theme [name]`
	zsh-interactive-cd
	aws
	docker
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#

## Aliases
alias vim="nvim +NoSession"
alias cat="bat"
alias ls="eza"
alias l="eza --long --all --header"
alias dust="dust --reverse"
alias fzf="fzf --layout=reverse --height='30%'"
alias fzfp="fzf --preview='bat {}'"
alias edit-fzf="$EDITOR \"\$(fzf)\""
alias e="$EDITOR"
alias ai="mods"

### Habits from windows land and more
alias where="which"
alias cls="clear"
alias open="xdg-open"

### So I don't need to remember weird binary names
alias cleandevartifacts="kondo --older 3w"

### Gnome Utilities

#### Night light -- doesn't seem to really work when operating from gsettings/the command line
alias night-light-on="gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true"
alias night-light-off="gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled false"

## Hooks

### Zoxide
if [[ -x "$(which zoxide)"  ]]; then
	eval "$(zoxide init zsh)"
fi

## Functions

### Print PATH
print-path() {
	echo $PATH | sed "s/:/\n/g"
}

## Keybindings

### Vim on
#bindkey -v

## Prompt
eval "$(starship init zsh)"

source "$HOME/.config/broot/launcher/bash/br"

## Completions
### Brew
if type brew &>/dev/null; then
	FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi
if type nix &>/dev/null; then
	fpath=(~/.nix-profile/share/zsh/vendor-completions ~/.nix-profile/share/zsh/site-functions $fpath)
fi
### pipx
eval "$(register-python-argcomplete pipx)"

COMPLETIONS_PATH=~/.cache/zsh/completions
function generate_completions() {
	local cmd=$1
	local comp_cmd=$2

	if command -v "$cmd" >/dev/null 2>&1; then
		comp_script="$COMPLETIONS_PATH/_$cmd"
		if [ ! -f "$comp_script" ]; then
			mkdir -p $COMPLETIONS_PATH
			eval $comp_cmd > "$comp_script"
		fi
	fi
}

generate_completions "just" "just --completions zsh"
# generate_completions "gh" "gh completion -s zsh"
generate_completions "flamegraph" "flamegraph --completions zsh"
fpath=($COMPLETIONS_PATH $fpath)
export FPATH
autoload -Uz compinit
compinit

## Functions

### Download a m3u8 playlist
function download_m3u8 {
  # $1 is the URL of the m3u8 playlist
  # $2 is the output file name

  # Check if the URL and output file name are provided
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: download_m3u8 <URL of m3u8 playlist> <output file name>"
    return
  fi

  # Download the m3u8 playlist using ffmpeg with the protocol whitelist flag
  ffmpeg -protocol_whitelist "file,http,https,tcp,tls,crypto" -i $1 -c copy -bsf:a aac_adtstoasc $2
}

# Function to randomize filenames in a directory while preserving extensions
randomize_filenames() {
  # Directory path (default: current directory)
  local directory="${1:-.}"

  # Move to the directory
  cd "$directory" || return 1

  # Iterate over files in the directory
  for file in *; do
    # Check if the item is a file
    if [[ -f $file ]]; then
      # Check if the file name is already randomized
      # HACK: this check is weak, but its the best we can do
      # without storing the generated names in a datastore.
      if [[ $file =~ ^[[:alnum:]]{12}\.[[:alnum:]]+$ ]]; then
        echo "Skipping already randomized file: '$file'"
      else
        # Generate a random name
        local random_name=$(mktemp -u XXXXXXXXXXXX)
        
        # Get the file extension
        local extension="${file##*.}"
        
        # Rename the file with the random name and original extension
        mv "$file" "$random_name.$extension"
        
        echo "Renamed '$file' to '$random_name.$extension'"
      fi
    fi
  done

  echo "File name randomization complete."
}

docker-containers-remove() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

docker-pruneall() {
    docker-containers-remove
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
}

## Atuin, alternative shell history
eval "$(atuin init zsh --disable-up-arrow)"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
